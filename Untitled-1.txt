'use strict';
var inquirer = require('inquirer');
const readline = require('readline');

class Flechette{
    constructor(){
        this.joueurs = []
        this.tirs = []
        this.pointsTourDuMonde = [1,5,10,15,20]
    }
    ajouterJoueur(...arg){
        this.joueurs = [...this.joueurs, ...arg]
    }
    leTourDuMonde(...arg){
        this.tirs = [...arg]
        var i = 0
            for (let a = 0; a < this.pointsTourDuMonde.length; a++) {
                while (this.tirs[i] != this.pointsTourDuMonde[a]) {
                    console.log("Raté")
                    i++
                }
                if (this.tirs[i] == 20) {
                    break
                }
                console.log("bravo mais c'est pas fini")
                i++
            }
            console.log("C'est gagné ! Coolos")
    }
}

console.log('Bienvenu sur le jeu de flechettes');

const jeu = new Flechette()

var questions = [
    {
        type: 'number',
        name: 'nombreJoueurs',
        message: 'combien de joueur : '
    },
    {
        type: 'rawlist',
        name: 'modeDeJeu',
        message: 'choisissez votre mode de jeu :',
        choices: ['le tour du Monde', 'le 301', 'le Cricket']
      },
];

inquirer.prompt(questions).then(answers => {

    const nbJoueur = answers.nombreJoueurs;
    let nomQuestions = []

    for (let i = 0; i < nbJoueur; i++) {
        nomQuestions.push(
            {
                    type: 'input',
                    name: `nomJoueur-${i}`,
                    message: 'Nom du joueur :'
            })
    }
    inquirer.prompt(nomQuestions).then(nomAnswers => {
        const listeNoms = Object.values(nomAnswers)
        for(let val = 0; val < listeNoms.length; val++){
            jeu.joueurs.push(listeNoms[val])
        }
        console.log(jeu.joueurs)
    })
});

-------------------------------------------------------------------


//routes.js 
.put(function (req, res) {
        Game.findById(req.params.game_id, function (err, r) {
            if (err) {
                res.send(err);
            }
            r.id = req.body.id,
                r.mode = req.body.mode,
                r.name = req.body.name,
                r.status = req.body.status,
                r.createdAt = req.body.createdAt
            r.save(function (err) {
                if (err) {
                    res.send(err);
                }
                res.json({ message: 'Bravo, mise à jour des données OK' });
            });
        });
    })

   
------------------------------------------------------------------------------------


const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();
const Player = require('./models/Player');
const Game = require('./models/Game');


mongoose.connect('mongodb://localhost:27017', {
    useCreateIndex: true,
    useNewUrlParser: true, useUnifiedTopology: true
})

mongoose.connection.on('error', error => console.log(error));
mongoose.Promise = global.Promise;

app.use(bodyParser.urlencoded({ extended: false }));

const routes = require('./routes.js');
app.use('/', routes);

app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.json({ error: err });
});

app.listen(3000, () => {
    console.log('Server started')
});

-------------------------------------------------------------------

const MongoClient = require('mongodb').MongoClient;
const assert = require('assert');
// Connection URLs
const url = 'mongodb://localhost:27017';
// Database Name
const dbName = 'myproject';
// Create a new MongoClient
const client = new MongoClient(url, { useCreateIndex: true, useNewUrlParser: true, useUnifiedTopology: true });
// Use connect method to connect to the Server
client.connect(function (err) {
    assert.equal(null, err);
    console.log("Connection reussi : " + url);
    const db = client.db(dbName);
    client.close();
});
console.log("Connection echouée");


